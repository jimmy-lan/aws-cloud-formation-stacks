AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  A simple stack that creates a VPC that spans two availability zones. Two public subnets
  and two private subnets will be provisioned in this VPC.
Metadata:
  Author: Jimmy Lan
  Version: "2022-07-31"
  Purpose: "VPC baseline"
Parameters:
  VpcName:
    Type: String
    Default: "My VPC"
    MaxLength: 50
    Description: >-
      (Optional) Name of this VPC.
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]\\/[0-9]{2}$"
    Description: "*(Required) CIDR block that this VPC uses."
  VpcInstanceTenancy:
    Type: String
    Default: "default"
    AllowedValues:
      - "default"
      - "dedicated"
    Description: "*(Required) Tenancy of instances in this VPC."
  VpcSubnetAzs:
    Type: List<AWS::EC2::AvailabilityZone::Name>
    Description: >-
      *(Required) Availability zones that this VPC spans across. Note: This simple stack only supports two
      availability zones. Please select exactly two availability zones - one public and one private subnet
      will be provisioned in each AZ that you select. If you select more than two AZs, only the first two
      will be used. If you select less than two AZs, an error will be thrown.
  PublicSubnet1Name:
    Type: String
    Default: "Public 1"
    Description: "(Optional)"
  PublicSubnet1Cidr:
    Type: String
    Default: "10.0.0.0/20"
    Description: "*(Required) CIDR block for **Public** Subnet 1 residing in the first AZ."
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]\\/[0-9]{2}$"
  PrivateSubnet1Name:
    Type: String
    Default: "Private 1"
    Description: "(Optional)"
  PrivateSubnet1Cidr:
    Type: String
    Default: "10.0.16.0/20"
    Description: "*(Required) CIDR block for **Private** Subnet 1 residing in the first AZ."
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]\\/[0-9]{2}$"
  PublicSubnet2Name:
    Type: String
    Default: "Public 2"
    Description: "(Optional)"
  PublicSubnet2Cidr:
    Type: String
    Default: "10.0.32.0/20"
    Description: "*(Required) CIDR block for **Public** Subnet 2 residing in the first AZ."
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]\\/[0-9]{2}$"
  PrivateSubnet2Name:
    Type: String
    Default: "Private 2"
    Description: "(Optional)"
  PrivateSubnet2Cidr:
    Type: String
    Default: "10.0.48.0/20"
    Description: "*(Required) CIDR block for **Private** Subnet 2 residing in the first AZ."
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]\\/[0-9]{2}$"
  ShouldProvisionNatGateway:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: >-
      *(Required) Determine whether one or more NAT gateway(s) should be provisioned for your VPC.
      Select "true" if NAT gateways should be provisioned.
  ShouldConfigureHANatGateway:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: >-
      *(Required) When set to "true", one NAT gateway will be provisioned for every availability zone included
      in this VPC.
Conditions:
  UseVpcName: !Not [!Equals [!Ref VpcName, ""]]
  UsePublic1Name: !Not [!Equals [!Ref PublicSubnet1Name, ""]]
  UsePublic2Name: !Not [!Equals [!Ref PublicSubnet2Name, ""]]
  UsePrivate1Name: !Not [!Equals [!Ref PrivateSubnet1Name, ""]]
  UsePrivate2Name: !Not [!Equals [!Ref PrivateSubnet2Name, ""]]
  UseNatGateway: !Equals [!Ref ShouldProvisionNatGateway, "true"]
  UseHANatGatewayConfig: !Equals [!Ref ShouldConfigureHANatGateway, "true"]
  UseMultiPrivateRT: !And [!Condition UseNatGateway, !Condition UseHANatGatewayConfig]
  UseOnePrivateRT: !Not [!Condition UseMultiPrivateRT]
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: !Ref VpcInstanceTenancy
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !If ["UseVpcName", !Ref VpcName, !Ref "AWS::NoValue"]

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select ["0", !Ref VpcSubnetAzs]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !If ["UsePublic1Name", !Ref PublicSubnet1Name, !Ref "AWS::NoValue"]
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select ["0", !Ref VpcSubnetAzs]
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !If ["UsePrivate1Name", !Ref PrivateSubnet1Name, !Ref "AWS::NoValue"]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ "1", !Ref VpcSubnetAzs ]
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !If [ "UsePublic2Name", !Ref PublicSubnet2Name, !Ref "AWS::NoValue" ]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ "1", !Ref VpcSubnetAzs ]
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !If [ "UsePrivate2Name", !Ref PrivateSubnet2Name, !Ref "AWS::NoValue" ]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !Join [": ", ["IGW", !Ref VpcName]]
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !Join [": ", ["Public RT", !Ref "AWS::StackName"]]
  IGWRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: UseOnePrivateRT
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !Join [ ": ", [ "Private RT", !Ref "AWS::StackName" ] ]
  Private1RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: UseMultiPrivateRT
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !Join [ ": ", [ "Private RT AZ1", !Ref "AWS::StackName" ] ]
  Private2RouteTable:
    Type: AWS::EC2::RouteTable
    Condition: UseMultiPrivateRT
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
        - Key: "Name"
          Value: !Join [ ": ", [ "Private RT AZ1", !Ref "AWS::StackName" ] ]

  Public1RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  Public2RTAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  Private1RTSingleAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseOnePrivateRT
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  Private2RTSingleAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseOnePrivateRT
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  Private1RTMultiAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseMultiPrivateRT
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref Private1RouteTable
  Private2RTMultiAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: UseMultiPrivateRT
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref Private2RouteTable

  # NAT gateway
  Public1NatGatewayIp:
    Type: AWS::EC2::EIP
    DependsOn: Vpc
    Condition: UseNatGateway
    Properties:
      Domain: "vpc"
  Public1NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: UseNatGateway
    DependsOn: Public1NatGatewayIp
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !Ref Public1NatGatewayIp
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
  Public2NatGatewayIp:
    Type: AWS::EC2::EIP
    DependsOn: Vpc
    Condition: UseMultiPrivateRT
    Properties:
      Domain: "vpc"
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
  Public2NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: UseMultiPrivateRT
    DependsOn: Public2NatGatewayIp
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !Ref Public1NatGatewayIp
      Tags:
        - Key: "Stack"
          Value: !Ref "AWS::StackName"
  NatGatewaySingleRoute:
    Type: AWS::EC2::Route
    Condition: UseNatGateway
    DependsOn: Public1NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Public1NatGateway
  NatGatewayMultiRoutePrivate1:
    Type: AWS::EC2::Route
    Condition: UseMultiPrivateRT
    DependsOn: Public1NatGateway
    Properties:
      RouteTableId: !Ref Private1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Public1NatGateway
  NatGatewayMultiRoutePrivate2:
    Type: AWS::EC2::Route
    Condition: UseMultiPrivateRT
    DependsOn: Public2NatGateway
    Properties:
      RouteTableId: !Ref Private2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Public2NatGateway
